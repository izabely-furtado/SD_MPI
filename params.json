{
  "name": "Sd mpi",
  "tagline": "Laboratório de MPI",
  "body": "## Relatório\r\n### Partes Modificadas e Motivações\r\n\r\nO programa principal tem o nome de **integral_mpi.c**, os demais são a evolução do mesmo, cada parte indicada por seu próprio cabeçario.\r\n\r\n### Nomeações e Organização\r\n\r\nHá a definição de parametros de limite que necessitam ser divididos de forma balanceada para cada uma das CPUs, sendo assim, os limites foram gerados comparados com o **rank** pertencente a cada máquina e ao **size**, que corresponde ao número total de máquinas interligadas rodando o programa\r\n\r\n`Size e Rank no Main\r\n\r\n        int size, rank;\r\n\tMPI_Comm_rank(MPI_COMM_WORLD, &rank);\r\n\tMPI_Comm_size(MPI_COMM_WORLD, &size);\r\n\r\n`\r\n\r\nIsso foi calculado de forma a definir os limites locais em cada um dos rank\r\n\r\n`Limites\r\n\r\n        larguraLocal = (B - A) / size;   \r\n     \r\n\taLocal = A + rank * larguraLocal;\r\n\r\n\tbLocal = aLocal + larguraLocal;\r\n\r\n\tnLocal = nDivi/size;\r\n\r\n`\r\nDado isso, para cada uma das maquinas envolvidas foi definido como Limite, com sua respectiva função de criação **RankCalculaArea**. Além disso, foram renomeados por todo o código diversos argumentos e variáveis.\r\n\r\nFunções como **AreaTrapezio** e **f(x)** praticamente não foram modificadas, no entanto a de calculo da área foi dividida em duas funções, **CalculaArea** e **ThreadCalculaArea**, a primeira com o efetivo calculo da área e outra que chama esse calculo de área e altera a variável global. \r\n\r\n### Reduce\r\n\r\nO função reduce da biblioteca MPI é usada de tal forma para que o calculo de cada área sea somada para que fosse impresso a área final encontrada da integral. Assim foram somados todos os **local_sum** e encaminhado o valor final ao **rank 0** na variável **global_sum**  e a partir  daí houve a impressão do total.\r\n\r\n\r\n` Calculando Area e Usanso Reduce\r\n\r\n        //local_sum = RankCalculaArea(A, B, nDivi, rank, size);\r\n\t\r\n        local_sum = RankCalculaArea(0.0, 1.0, 2000, rank, size);\r\n\t\r\n\tMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\r\n\t\r\n        //Imprime o resultado\r\n\r\n\tif (rank == 0) {\r\n\r\n\t\tprintf(\"Total sum = %f \\n\", global_sum);\r\n\r\n\t}\r\n\r\n`\r\n**Por que a escolha do MPI_Reduce ao invés do MPI_All_Reduce? **\r\n\r\nPois não era necessário que todos os computadores soubessem o valor da integral, já que a impressão só seria feita pelo **rank 0**.\r\n\r\n\r\n### Mutex\r\n\r\nQuanto a função **ThreadCalculaArea** é tratada, pois a alteração da variável global envolve mais de uma operação em baixo nível. \r\n\r\nSendo assim, o processo executado por uma thread pode ser interrompido ou modificado pela intervenção de outra, causando assim um resultado de integral inválido.\r\n\r\nEnquanto uma altera o valor da variável global outra pode tentar alterar ao mesmo tempo, assim esse processo é serializado pelo mutex da seguinte forma:\r\n\r\n`//controlando área que pode haver condição de corrida\r\n\r\n    pthread_mutex_lock(&lock);\r\n\r\n    integral += area2; \r\n\r\n    pthread_mutex_unlock(&lock);`\r\n\r\n### Criação de Threads\r\n\r\nA criação de threads é feito de acordo com o número de processadores, esse número é obtido pela chamada de função **get_nprocs()**, que foi válida pela inclusão da biblioteca **<sys/sysinfo.h>**.\r\n\r\nFoi criado um vetor de threads com o tamanho do número de núcleos existentes no computador e foi dado a cada thread um objetivo, uma área limitada para que essa thread pudesse calcular a função **ThreadCalculaArea** e finalmente cada uma dessas threads criadas foi startada.\r\n\r\n### Main\r\n\r\nChama as funções e calcula a área, seguindo esses passos:\r\n\r\n* Verificar-se se houve falhas na inicialização das threads,\r\n* São criadas as threads.\r\n* É inicializado o MPI\r\n* É gerado o rank e o size\r\n* É efetivamente calculada a área em cada rank\r\n* As threads são destruídas \r\n* É gerada a soma total de todas as ranks\r\n* É impresso o resultado pelo rank 0\r\n* O MPI é finalizado\r\n* É encerrado o programa.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}